android {
    buildToolsVersion "28.0.3"
    compileSdkVersion 28
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    defaultConfig {
        applicationId "dalcoms.game.dotsup"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 8
        versionName "1.7"
        //1.0 : 1'st launching
        //1.1 : 해상도에 따른 터치 오류 변경
        //     - viewport 생성, 적용, unproject 를 통해 일종의 resized touch 처리
        //     - 처음부터 파악되었던 부분이 아니여서 그런지 전체적인 구조가 이상함. 추후에는 이를 감안해서 touch 처리 할 것.
        //1.2 : 터치 오류 변경, 아이템 추가
        //     - 1.1 에서 viewport.unproject 한 뒤, heigh-y 를 두번 하게 했음.
        //         - 화면 비율이 안 맞을 경우, y 좌표 오류
        //         - viewport.unproject 한번만 하게끔 변경
        //     - dice_missile item 추가
        //     - note... 호윤도 80레벨 모두 클리어..... 추가 레벨 필요
        //1.3 : 저장....1.2에서 테스트로 그대로 릴리스 해버림...이런....
        //5, 1.4 : 레벨 업데이트 ~100
        //     - 레벨 100
        //     - 자잘은 버그 수정 및 메인 화면에 share, market, review icon 추가
//        6, 1.5
//        너무 간만의 업데이트
//        1. 화면 비율 수정
//        - H가 1920 이상일 경우, 화면을 꽉 채우게 조정
//        2. Xdriver 는 우선 pending
//        3. mission clear effect 수정
//        - 해당위치에 효과 표시
//        4. 레벨업데이트(105)

//        7,1.6
//        "한글날 업데이트"
//        1. Guide 추가
//        2. 그외 화면 비율 관련 수정했던 것도 같은데 기억이 나지 않음. 벌써 1년이 지났다
//        8,1.7
//        1.6 에서 target sdk 만 28로 수정
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'dalcoms.game.dotsup/dalcoms.game.dotsup.AndroidLauncher'
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src", 'gen'
        }
    }

    jdt {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }

    classpath {
        plusConfigurations += [ project.configurations.compile ]        
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'       
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [ COMPILE: [plus:[project.configurations.compile]]]        

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}
